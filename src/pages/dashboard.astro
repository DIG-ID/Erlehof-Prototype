---
import "../styles/global.css";
---

<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Dashboard</title>
</head>
<body class="bg-gray-100">
  <div class="flex h-screen">
    <!-- Sidebar -->
    <div class="side-bar w-64 bg-indigo-600 text-white p-6">
      <h2 class="text-xl font-semibold mb-8">Dashboard</h2>
      <ul class="space-y-4">
        <li><a href="#profile" class="text-lg hover:text-indigo-200 sidebar-link" data-target="profile">Profile</a></li>
        <li><a href="#user-list" class="text-lg hover:text-indigo-200 sidebar-link" data-target="user-list">User List</a></li>
        <li><a href="#create-job" class="text-lg hover:text-indigo-200 sidebar-link" data-target="create-job">Create a new job</a></li>
        <li><a href="#job-list" class="text-lg hover:text-indigo-200 sidebar-link" data-target="job-list">Jobs List</a></li>
      </ul>
    </div>

    <!-- Main Content -->
    <div class="main flex-1 p-6 overflow-y-auto">
      <!-- Profile Section -->
      <div id="profile" class="space-y-6 section hidden">
        <h2 class="text-2xl font-bold mb-4">Profile</h2>
        <p id="user-info">Loading user info...</p>
        <button id="logout-btn" class="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition">
          Logout
        </button>
      </div>

      <!-- User List -->
      <div id="user-list" class="space-y-6 mt-10 section hidden">
        <h2 class="text-2xl font-bold mb-4">User List</h2>
        <ul id="user-list-container"></ul>
      </div>

      <!-- Create Job Form -->
      <div id="create-job" class="bg-white p-6 rounded-lg shadow-md mt-10 section hidden">
        <h2 class="text-xl font-semibold mb-4">Create a Job</h2>
        <form id="job-form">
          <label class="block mb-2">Title:</label>
          <input type="text" id="job-title" class="w-full p-2 border rounded mb-4" required>
      
          <label class="block mb-2">Description:</label>
          <textarea id="job-description" class="w-full p-2 border rounded mb-4" required></textarea>
      
          <label class="block mb-2">Assign To:</label>
          <select id="assign-user" class="w-full p-2 border rounded mb-4">
            <!-- Options will be dynamically loaded -->
          </select>
      
          <button type="submit" class="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700">
            Create Job
          </button>
        </form>
        <p id="job-message" class="text-green-600 mt-4 hidden"></p>
      </div>

      <!-- Job List -->
      <div id="job-list" class="space-y-6 mt-10 section hidden">
        <h2 class="text-2xl font-bold mb-4">Job List</h2>
        <ul id="job-list-container"></ul>
      </div>
    </div>
  </div>

  <script type="module">
    import { supabase } from "/src/lib/supabase.js";

    // Function to hide all sections and show the targeted one
    function showSection(targetId) {
        const sections = document.querySelectorAll('.section');
        sections.forEach(section => section.classList.add('hidden')); // Hide all sections
        const targetSection = document.getElementById(targetId);
        if (targetSection) {
            targetSection.classList.remove('hidden'); // Show the clicked section
        }
    }

    // Event listener for sidebar links
    const sidebarLinks = document.querySelectorAll('.sidebar-link');
    sidebarLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault(); // Prevent default anchor behavior
        const targetId = e.target.getAttribute('data-target');
        showSection(targetId);
      });
    });

    async function fetchUsers() {
        try {
            const { data, error } = await supabase
                .from("users")
                .select("id, email, role_id")
                .neq("role_id", 1); // Exclude superadmins

            if (error) {
                console.error("Error fetching users:", error.message);
                return;
            }

            const userListContainer = document.getElementById("user-list-container");

            if (data && Array.isArray(data)) {
                // Display user information elsewhere on the page if needed
                userListContainer.innerHTML = data
                    .map(user => `<li class="text-lg text-gray-800">ID: ${user.id}, Email: ${user.email} (Role: ${user.role_id})</li>`)
                    .join("");
            }
        } catch (err) {
            console.error("Unexpected error fetching users:", err);
        }
    }


    async function fetchUser() {
        const { data: { user }, error } = await supabase.auth.getUser();

        if (error || !user) {
            console.error("Not logged in:", error?.message);
            window.location.href = "/login";
            return;
        }

        try {
            const { data: userData, error: userError } = await supabase
                .from("users")
                .select("id, email, role_id")
                .eq("id", user.id)
                .single();

            if (userError) {
                console.error("Error fetching user profile:", userError.message);
            } else {
                document.getElementById("user-info").textContent = `Logged in as: ${user.email}`;

                // Show user list and job creation only for superadmins (role_id = 1) and admins (role_id = 2)
                if (userData?.role_id === 1 || userData?.role_id === 2) {
                    fetchUsers(); // Show the user list if superadmin or admin
                    document.getElementById("user-list").classList.remove("hidden");
                } else {
                    document.getElementById("user-list").classList.add("hidden"); // Hide user list for non-admin users
                }

                // Allow job creation only for superadmins (role_id = 1)
                if (userData?.role_id !== 1) {
                    document.getElementById("job-form").classList.add("hidden");
                }
            }
        } catch (err) {
            console.error("Error fetching user role:", err);
        }
    }

    /*FETCH ROLES FUNCTION*/
    async function loadRoles() {
        try {
            const { data: roles, error } = await supabase
                .from('roles')
                .select('id, role_name');
            
            if (error) {
                console.error("Error loading roles:", error.message);
                return;
            }

            const selectElement = document.getElementById("assign-user");

            // Clear existing options
            selectElement.innerHTML = '';

            // Add default "Select a role" option (optional)
            const defaultOption = document.createElement("option");
            defaultOption.value = '';
            defaultOption.textContent = 'Select a role';
            selectElement.appendChild(defaultOption);

            roles.forEach(role => {
                const option = document.createElement("option");
                option.value = role.id;
                option.textContent = role.role_name;
                selectElement.appendChild(option);
            });
        } catch (err) {
            console.error("Error fetching roles:", err);
        }
        
    }

    loadRoles();


    /*CREATE JOBS FUNCTION*/
    async function createJob(event) {
        event.preventDefault();

        const title = document.getElementById("job-title").value;
        const description = document.getElementById("job-description").value;
        const assignedRole = document.getElementById("assign-user").value;

        if (!title || !description || !assignedRole) {
            alert("Please fill in all fields.");
            return;
        }

        const { data: { user } } = await supabase.auth.getUser();
        if (!user) {
            alert("User not authenticated.");
            return;
        }

        try {
            // Ensure the creator is a superadmin
            const { data: userData, error: userError } = await supabase
                .from("users")
                .select("role_id")
                .eq("id", user.id)
                .single();

            if (userError || userData.role_id !== 1) {
                alert("Only superadmins can create jobs.");
                return;
            }

            // Insert the job, now assigning it to a role instead of a user
            const { data, error } = await supabase
                .from("jobs")
                .insert([{
                    title: title,
                    description: description,
                    assigned_to: assignedRole,  // This is now the role ID
                    created_by: user.id,
                    status: "open",
                    created_at: new Date()
                }]);

            if (error) {
                console.error("Error creating job:", error.message);
                return;
            }

            document.getElementById("job-message").textContent = "Job successfully created!";
            document.getElementById("job-message").classList.remove("hidden");

            // Send a notification to the assigned role (if necessary)
            await supabase
                .from("notifications")
                .insert([{
                    role_id: assignedRole,  // You may need to adjust this if notifications are specific to users
                    message: `A new job has been assigned to the ${assignedRole} role: ${title}`,
                    created_at: new Date(),
                    read: false
                }]);

            setTimeout(() => {
                document.getElementById("job-message").classList.add("hidden");
                document.getElementById("job-form").reset();
            }, 3000);

        } catch (err) {
            console.error("Error inserting job:", err);
        }
    }


    async function fetchJobs() {
        try {
            const { data, error } = await supabase
                .from("jobs")
                .select("title, description, status");

            if (error) {
                console.error("Error fetching jobs:", error.message);
                return;
            }

            const jobListContainer = document.getElementById("job-list-container");

            if (data && Array.isArray(data)) {
                jobListContainer.innerHTML = data
                    .map(job => `
                        <li class="bg-white p-4 rounded-lg shadow-md mb-4">
                            <h3 class="text-xl font-semibold">${job.title}</h3>
                            <p class="text-gray-700">${job.description}</p>
                            <p class="text-sm text-gray-500">Status: ${job.status}</p>
                        </li>
                    `)
                    .join("");
            }
        } catch (err) {
            console.error("Unexpected error fetching jobs:", err);
        }
    }

    async function logout() {
        await supabase.auth.signOut();
        window.location.href = "/login";
    }

    document.addEventListener("DOMContentLoaded", () => {
        fetchUser();
        fetchJobs();
        
        document.getElementById("logout-btn").addEventListener("click", logout);
        document.getElementById("job-form").addEventListener("submit", createJob);

        showSection("profile");
    });
  </script>
</body>
</html>
